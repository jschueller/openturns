%define OT_AdaptiveSamplingAlgorithm_doc
"Approximation algorithm.

Notes
-----
This class is not usable because it has sense only within the
:class:`~openturns.FunctionalChaosAlgorithm`."
%enddef
%feature("docstring") OT::SequentialSamplingAlgorithmImplementation
OT_AdaptiveSamplingAlgorithm_doc

// ---------------------------------------------------------------------

%define OT_AdaptiveSamplingAlgorithm_getX_doc
"Accessor to the input sample.

Returns
-------
x : :class:`~openturns.Sample`
    Input sample"
%enddef
%feature("docstring") OT::SequentialSamplingAlgorithmImplementation::getX
OT_AdaptiveSamplingAlgorithm_getX_doc

// ---------------------------------------------------------------------

%define OT_AdaptiveSamplingAlgorithm_getY_doc
"Accessor to the output sample.

Returns
-------
y : :class:`~openturns.Sample`
    Input sample"
%enddef
%feature("docstring") OT::SequentialSamplingAlgorithmImplementation::getY
OT_AdaptiveSamplingAlgorithm_getY_doc

// ---------------------------------------------------------------------

%define OT_AdaptiveSamplingAlgorithm_getGenerationIndices_doc
"Accessor to the generation indices.

Returns
-------
generationIndices : :class:`~openturns.Indices`
    Indices of last element for each generation."
%enddef
%feature("docstring") OT::SequentialSamplingAlgorithmImplementation::getGenerationIndices
OT_AdaptiveSamplingAlgorithm_getGenerationIndices_doc

// ---------------------------------------------------------------------

%define OT_AdaptiveSamplingAlgorithm_generate_doc
"Generate new samples.

Parameters
----------
size : int
    Number of samples to generate

Returns
-------
x : :class:`~openturns.Sample`
    New input samples.
"
%enddef
%feature("docstring") OT::SequentialSamplingAlgorithmImplementation::generate
OT_AdaptiveSamplingAlgorithm_generate_doc

// ---------------------------------------------------------------------

%define OT_AdaptiveSamplingAlgorithm_update_doc
"Update the state.

Parameters
----------
x : :class:`~openturns.Sample`
    New input samples.
y : :class:`~openturns.Sample`
    New output samples.
"
%enddef
%feature("docstring") OT::SequentialSamplingAlgorithmImplementation::update
OT_AdaptiveSamplingAlgorithm_update_doc
