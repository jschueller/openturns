%feature("docstring") OT::Gibbs
"Gibbs sampling method.

Refer to :ref:`bayesian_calibration`, :ref:`metropolis_hastings`.

Parameters
----------
samplers : sequence of :class:`~openturns.MetropolisHastings`
    List of samplers for each bloc of the chain

Notes
-----
Gibbs enables to carry out MCMC updating component per component or at least
per blocs of components using several Metropolis-Hastings samplers.

Examples
--------
>>> import openturns as ot
>>> ot.RandomGenerator.SetSeed(0)
>>> chainDim = 3
>>> # Observations
>>> obsDim = 1
>>> obsSize = 10
>>> y = [-9.50794871493506, -3.83296694500105, -2.44545713047953,
...      0.0803625289211318, 1.01898069723583, 0.661725805623086,
...      -1.57581204592385, -2.95308465670895, -8.8878164296758,
...      -13.0812290405651]
>>> y_obs = ot.Sample([[yi] for yi in y])
>>> # Parameters
>>> covariates = ot.Sample(obsSize, chainDim)
>>> for i in range(obsSize):
...     for j in range(chainDim):
...         covariates[i, j] = (-2 + 5.0 * i / 9.0) ** j
>>> # Model
>>> fullModel = ot.SymbolicFunction(
...          ['p1', 'p2', 'p3', 'x1', 'x2', 'x3'],
...          ['p1*x1+p2*x2+p3*x3', '1.0'])
>>> parametersSet = range(chainDim)
>>> parametersValue = [0.0] * len(parametersSet)
>>> linkFunction = ot.ParametricFunction(fullModel, parametersSet, parametersValue)
>>> # Calibration parameters
>>> # Proposal distribution
>>> instrumental = ot.Uniform(-1.0, 1.0)
>>> # Prior distribution
>>> sigma0 = [10.0]*chainDim
>>> #  Covariance matrix
>>> Q0_inv = ot.CorrelationMatrix(chainDim)
>>> for i in range(chainDim): 
...     Q0_inv[i, i] = sigma0[i] * sigma0[i]
>>> mu0 = [0.0]*chainDim
>>> # x0 ~ N(mu0, sigma0)
>>> prior = ot.Normal(mu0, Q0_inv)
>>> # Conditional distribution y~N(z, 1.0)
>>> conditional = ot.Normal()
>>> # Create a Gibbs sampler
>>> mh_coll = [ot.RandomWalkMetropolisHastings(prior, mu0, instrumental, [i]) for i in range(chainDim)]
>>> for mh in mh_coll: mh.setLikelihood(conditional, y_obs, linkFunction, covariates)
>>> sampler = ot.Gibbs(mh_coll)
>>> sampler.setBurnIn(20)
>>> sampler.setThinning(10)
>>> # Get a realization
>>> mu = sampler.getRealization()"

// ---------------------------------------------------------------------

%feature("docstring") OT::Gibbs::getMetropolisHastingsCollection
"Get the samplers.

Returns
-------
samplers : list of :class:`~openturns.MetropolisHastings`
    List of samplers for each bloc of components"

// ---------------------------------------------------------------------

%feature("docstring") OT::Gibbs::getMetropolisHastingsCollection
"Get whether the posterior of a bloc is recomputed.

Returns
-------
recompute : :class:`~openturns.Indices`
    Whether the posterior of a bloc is recomputed"

// ---------------------------------------------------------------------

%feature("docstring") OT::Gibbs::getBurnIn
"Get the length of the burn-in period.

Returns
-------
lenght : int
    Length of the burn-in period, that is the number of first iterates of the
    MCMC chain which will be thrown away when generating the sample."

// ---------------------------------------------------------------------

%feature("docstring") OT::Gibbs::setBurnIn
"Set the length of the burn-in period.

Parameters
----------
lenght : int
    Length of the burn-in period, that is the number of first iterates of the
    MCMC chain which will be thrown away when generating the sample."

// ---------------------------------------------------------------------

%feature("docstring") OT::Gibbs::getThinning
"Get the thinning parameter.

Returns
-------
thinning : int
    Thinning parameter: storing only every :math:`k^{th}` point after the
    burn-in period.

Notes
-----
When generating a sample of size :math:`q`, the number of MCMC iterations
performed is :math:`l+1+(q-1)k` where :math:`l` is the burn-in period length
and :math:`k` the thinning parameter."

// ---------------------------------------------------------------------

%feature("docstring") OT::Gibbs::setThinning
"Set the thinning parameter.

Parameters
----------
thinning : int, :math:`k \geq 0`
    Thinning parameter: storing only every :math:`k^{th}` point after the
    burn-in period.

Notes
-----
When generating a sample of size :math:`q`, the number of MCMC iterations
performed is :math:`l+1+(q-1)k` where :math:`l` is the burn-in period length
and :math:`k` the thinning parameter."

// ---------------------------------------------------------------------

%feature("docstring") OT::Gibbs::getRecomputeLogPosterior
"Get the posterior recompute flags.

Returns
-------
recompute : :class:`~openturns.Indices`
    Whether the posterior is recomputed for the next bloc.
    It depends on the value of the posterior from the initial state:
    if the value is the same it wont be necessary to recompute the posterior each time.
    This is computed once at the first realization.
    For debug use only."

// ---------------------------------------------------------------------

%feature("docstring") OT::Gibbs::getHistory
"Get the history storage.

Returns
-------
history : :class:`~openturns.HistoryStrategy`
    Used to record the chain."

// ---------------------------------------------------------------------

%feature("docstring") OT::Gibbs::setHistory
"Set the history storage.

Parameters
----------
history : :class:`~openturns.HistoryStrategy`
    Used to record the chain."
