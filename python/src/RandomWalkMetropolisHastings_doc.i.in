%feature("docstring") OT::RandomWalkMetropolisHastings
"Random Walk Metropolis-Hastings method.

Refer to :ref:`bayesian_calibration`, :ref:`metropolis_hastings`.

Available constructor:
    RandomWalkMetropolisHastings(*targetDistribution, initialState, instrumental, marginalIndices*)

    RandomWalkMetropolisHastings(*targetLogPDF, support, initialState, instrumental, marginalIndices*)

Parameters
----------
targetDistribution : :class:`~openturns.Distribution`
    Target distribution sampled
targetLogPDF : :class:`~openturns.Function`
    Target log-pdf as a function
support : :class:`~openturns.Interval`
    Support of the target when defined with *targetLogPDF*
instrumental : :class:`~openturns.Distribution`
    Distribution from which the transition kernel of the MCMC is defined,
    as explained hereafter.
    In the following of this paragraph, :math:`\delta \sim p` means that the
    realization :math:`\delta` is obtained according to the *instrumental* distribution.
    The underlying algorithm is a Metropolis-Hastings one which draws candidates (for the
    next state of the chain) using a random walk: from the current state
    :math:`\vect{\theta}^k`, the candidate :math:`\vect{c}^k` for
    :math:`\vect{\theta}^{k+1}` can be expressed as
    :math:`\vect{c}^k = \vect{\theta}^k +\vect{\delta}^k` where the
    distribution of :math:`\vect{\delta}^k` does not depend on
    :math:`\vect{\theta}^k`.
marginalIndices : sequence of int, optional
    Bloc indices to indicate which components are updated
    If not specified, all components are updated

Notes
-----
RandomWalkMetropolisHastings enables to carry out a Metropolis-Hastings like
sampling from the current state of the chain plus a random step.

Examples
--------
>>> import openturns as ot
>>> import math as m
>>> ot.RandomGenerator.SetSeed(0)

Estimate a target distribution without likelihood:

>>> instrumental = ot.Normal([0.0] * 2, [0.5, 0.05], ot.IdentityMatrix(2))
>>> target = ot.ComposedDistribution([ot.Uniform(-100.0, 100.0)] * 2)
>>> initialState = [0.0] * 2
>>> sampler = ot.RandomWalkMetropolisHastings(target, initialState, instrumental)
>>> sampler.setBurnIn(20)
>>> sampler.setThinning(2)
>>> alpha_beta = sampler.getSample(10)

Now estimate a the distribution by defining the likelihood:

>>> sampler = ot.RandomWalkMetropolisHastings(target, initialState, instrumental)
>>> conditional = ot.Bernoulli()
>>> data = ot.Sample([[53, 1], [57, 1], [58, 1], [63, 1], [66, 0], [67, 0],
... [67, 0], [67, 0], [68, 0], [69, 0], [70, 0], [70, 0], [70, 1], [70, 1],
... [72, 0], [73, 0], [75, 0], [75, 1], [76, 0], [76, 0], [78, 0], [79, 0], [81, 0]])
>>> observations = data[:, 1]
>>> covariates = data[:, 0]
>>> fun = ot.SymbolicFunction(['alpha', 'beta', 'x'], ['exp(alpha + beta * x) / (1 + exp(alpha + beta * x))'])
>>> linkFunction = ot.ParametricFunction(fun, [2], [0.0])
>>> sampler.setLikelihood(conditional, observations, linkFunction, covariates)
>>> alpha_beta = sampler.getSample(10)

Now with an improper prior defined via its log-pdf and its support:

>>> log_density = ot.SymbolicFunction('x', 'log(2 + sin(x)^2) - (2 + cos(3*x)^3 + sin(2*x)^3) * x')
>>> support = ot.Interval([0.0], [2.0 * m.pi])
>>> instrumental = ot.Normal(0.0, 2.0)
>>> initialState = [3.0]
>>> sampler = ot.RandomWalkMetropolisHastings(log_density, support, initialState, instrumental)
>>> x = sampler.getSample(10)"

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomWalkMetropolisHastings::getInstrumental
"Get the instrumental distribution.

Returns
-------
instrumental : :class:`~openturns.Distribution`
    The distribution from which the transition kernels of the random walk
    Metropolis-Hastings algorithm is defined"

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomWalkMetropolisHastings::setInstrumental
"Set the instrumental distribution.

Parameters
----------
instrumental : :class:`~openturns.Distribution`
    The distribution from which the transition kernels of the random walk
    Metropolis-Hastings algorithm is defined"

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomWalkMetropolisHastings::getAdaptationPeriod
"Get the calibration step.

Returns
----------
period : positive int
    Number of samples before the adaptation occurs"

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomWalkMetropolisHastings::setAdaptationPeriod
"Set the calibration step.

Parameters
----------
period : positive int
    Number of samples before the adaptation occurs"

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomWalkMetropolisHastings::getExpansionFactor
"Get the expansion factor.

Returns
-------
expansionFactor : float
    Expansion factor :math:`e` for the adaptation"

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomWalkMetropolisHastings::setAdaptationExpansionFactor
"Set the expansion factor.

Parameters
----------
expansionFactor : float, :math:`e > 1`
    Expansion factor :math:`e` for the adaptation"

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomWalkMetropolisHastings::getAdaptationRange
"Get the range.

Returns
-------
range : :class:`~openturns.Interval` of dimension 1
    Range :math:`[m,M]` in the description of the method
    :meth:`computeUpdateFactor`."

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomWalkMetropolisHastings::setAdaptationRange
"Set the range.

Parameters
----------
range : :class:`~openturns.Interval` of dimension 1
    Range :math:`[m,M]` for the adaptation"

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomWalkMetropolisHastings::getAdaptationShrinkFactor
"Get the shrink factor.

Returns
-------
shrinkFactor : float
    Shrink factor :math:`s` for the adaptation"

// ---------------------------------------------------------------------

%feature("docstring") OT::RandomWalkMetropolisHastings::setShrinkFactor
"Set the shrink factor.

Parameters
----------
shrinkFactor : float, :math:`0 < s < 1`
    Shrink factor :math:`s` for the adaptation"
    
