%define OT_MetropolisHastings_doc
"Base class for Metropolis-Hastings algorithms.

Available constructor:
    MetropolisHastingsImplementation(*targetDistribution, initialState, marginalIndices*)

    MetropolisHastingsImplementation(*targetLogPDF, support, initialState, marginalIndices*)

Parameters
----------
targetDistribution : :class:`~openturns.Distribution`
    Target distribution sampled
targetLogPDF : :class:`~openturns.Function`
    Target log-pdf as a function
support : :class:`~openturns.Interval`
    Support of the target when defined with *targetLogPDF*
initialState : sequence of float
    Initial state of the chain
marginalIndices : sequence of int, optional
    Bloc indices to indicate which components are updated
    If not specified, all components are updated

Notes
-----
MetropolisHastingsImplementation provides an implementation of the concept of
sampler, using a Monte-Carlo Markov Chain (MetropolisHastingsImplementation)
algorithm starting from *initialState*.
More precisely, let :math:`t(.)` be the PDF of its target distribution and
:math:`d_{\theta}` its dimension, :math:`\pi(.)` be the PDF of the *prior*
distribution, :math:`f(.|\vect{w})` be the PDF of the *conditional* distribution
when its parameters are set to :math:`\vect{w}`, :math:`d_w` be the number of
scalar parameters of *conditional* distribution (which corresponds to the
dimension of the above :math:`\vect{w}`), :math:`g(.)` be the function
corresponding to model and :math:`(\vect{y}^1, \dots, \vect{y}^n)` be the
sample *observations* (of size :math:`n`):

The first usage defines a prior distribution using a :class:`~openturns.Distribution` object,
whereas the second allows to define the prior through a :class:`~openturns.Function`
of its log-density, together with the support of associated parameters.

The sampler consists of a MCMC algorithm whose target
distribution is defined by:

.. _PDF_target_formula:

.. math::

    t(\vect{\theta})
    \quad \propto \quad
    \underbrace{~\pi(\vect{\theta})~}_{\mbox{prior}} \quad
    \underbrace{~\prod_{i=1}^n f(\vect{y}^i|g^i(\vect{\theta}))~}_{\mbox{likelihood}}

where the :math:`g^i: \Rset^{d_{\theta}} \rightarrow\Rset^{d_w}`
(:math:`1\leq{}i\leq{}n`) are such that:

.. math::

    \begin{array}{rcl}
        g:\Rset^{d_\theta} & \longrightarrow & \Rset^{n\,d_w}\\
        \vect{\theta} & \longmapsto &
        g(\vect{\theta}) = \Tr{(\Tr{g^1(\vect{\theta})}, \cdots, \Tr{g^n(\vect{\theta})})}
        \end{array}

The likelihood term is defined separately from the constructor via :meth:`setLikelihood`.
Also, the total number of sampled realizations do not take into consideration
the burn-in and thinning parameters.

See Also
--------
RandomWalkMetropolisHastings"
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation
OT_MetropolisHastings_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_setLikelihood_doc
"Set the likelihood term.

Parameters
----------
conditional : :class:`~openturns.Distribution`
    Required distribution to define the likelihood of the underlying Bayesian
    statistical model.
observations : 2-d sequence of float
    Observations :math:`y^i` required to define the likelihood.
linkFunction : :class:`~openturns.Function`, optional
    Function :math:`g` that maps the chain into the conditional distribution parameters.
    If provided, its input dimension must match the chain dimention and its
    output dimension must match the conditional distribution parameter dimension.
    Else it is set to the identity.
covariates : 2-d sequence of float, optional
    Parameters :math:`c^i` of the linkFunction for each observation :math:`y^i`.
    If provided, its dimension must match the parameter dimension of linkFunction.

Notes
-----
The optional parameters linkFunction and covariates allow several options to define the likelihood:

- Without linkFunction and covariates the likelihood term reads:

    .. math:: \prod_{i=1}^n f(\vect{y}^i|\vect{\theta})

- If only the linkFunction is provided:

    .. math:: \prod_{i=1}^n f(\vect{y}^i|g^i(\vect{\theta}))

- If both the linkFunction and covariates are provided:

    .. math:: \prod_{i=1}^n f(\vect{y}^i|g^i_{c^i}(\vect{\theta}))
"
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::setLikelihood
OT_MetropolisHastings_setLikelihood_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_computeLogLikelihood_doc
"Compute the logarithm of the likelihood w.r.t. observations.

Parameters
----------
currentState : sequence of float
    Current state.

Returns
-------
logLikelihood : float
    Logarithm of the likelihood w.r.t. observations
    :math:`(\vect{y}^1, \dots, \vect{y}^n)`."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::computeLogLikelihood
OT_MetropolisHastings_computeLogLikelihood_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_computeLogPosterior_doc
"Compute the logarithm of the unnormalized posterior density.

Parameters
----------
currentState : sequence of float
    Current state.

Returns
-------
logPosterior : float
    Target log-PDF plus log-likelihood if the log-likelihood is defined"
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::computeLogPosterior
OT_MetropolisHastings_computeLogPosterior_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getBurnIn_doc
"Get the length of the burn-in period.

Returns
-------
lenght : int
    Length of the burn-in period, that is the number of first iterates of the
    MCMC chain which will be thrown away when generating the sample."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getBurnIn
OT_MetropolisHastings_getBurnIn_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_setBurnIn_doc
"Set the length of the burn-in period.

Parameters
----------
lenght : int
    Length of the burn-in period, that is the number of first iterates of the
    MCMC chain which will be thrown away when generating the sample."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::setBurnIn
OT_MetropolisHastings_setBurnIn_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getConditional_doc
"Get the *conditional* distribution.

Returns
-------
conditional : :class:`~openturns.Distribution`
    Distribution taken into account in the definition of the likelihood, whose
    PDF with parameters :math:`\vect{w}` corresponds to :math:`f(.|\vect{w})`
    in the equations of the
    :ref:`target distribution's PDF <PDF_target_formula>`."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getConditional
OT_MetropolisHastings_getConditional_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getLinkFunction_doc
"Get the model.

Returns
-------
model : :class:`~openturns.Function`
    Model take into account in the definition of the likelihood, which
    corresponds to :math:`g`, that is the functions :math:`g^i`
    (:math:`1\leq i \leq n`) in the equation of the
    :ref:`target distribution's PDF <PDF_target_formula>`."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getLinkFunction
OT_MetropolisHastings_getLinkFunction_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getObservations_doc
"Get the observations.

Returns
-------
observations : :class:`~openturns.Sample`
    Sample taken into account in the definition of the likelihood, which
    corresponds to the :math:`n`-tuple of the :math:`\vect{y}^i`
    (:math:`1\leq i \leq n`) in equations of the
    :ref:`target distribution's PDF <PDF_target_formula>`."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getObservations
OT_MetropolisHastings_getObservations_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getCovariates_doc
"Get the parameters.

Returns
-------
parameters : :class:`~openturns.Point`
    Fixed parameters of the model :math:`g` required to define the likelihood."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getCovariates
OT_MetropolisHastings_getCovariates_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getTargetDistribution_doc
"Get the target distribution.

Returns
-------
target_dist : :class:`~openturns.Distribution`
    The target distribution of the parameter of the underlying Bayesian
    statistical model, whose PDF corresponds to :math:`\pi` in the equations of
    the :ref:`target distribution's PDF <PDF_target_formula>`."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getTargetDistribution
OT_MetropolisHastings_getTargetDistribution_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getThinning_doc
"Get the thinning parameter.

Returns
-------
thinning : int
    Thinning parameter: storing only every :math:`k^{th}` point after the
    burn-in period.

Notes
-----
When generating a sample of size :math:`q`, the number of MCMC iterations
performed is :math:`l+1+(q-1)k` where :math:`l` is the burn-in period length
and :math:`k` the thinning parameter."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getThinning
OT_MetropolisHastings_getThinning_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_setThinning_doc
"Set the thinning parameter.

Parameters
----------
thinning : int, :math:`k \geq 0`
    Thinning parameter: storing only every :math:`k^{th}` point after the
    burn-in period.

Notes
-----
When generating a sample of size :math:`q`, the number of MCMC iterations
performed is :math:`l+1+(q-1)k` where :math:`l` is the burn-in period length
and :math:`k` the thinning parameter."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::setThinning
OT_MetropolisHastings_setThinning_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getHistory_doc
"Get the history storage.

Returns
-------
history : :class:`~openturns.HistoryStrategy`
    Used to record the chain."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getHistory
OT_MetropolisHastings_getHistory_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_setHistory_doc
"Set the history storage.

Parameters
----------
history : :class:`~openturns.HistoryStrategy`
    Used to record the chain."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::setHistory
OT_MetropolisHastings_setHistory_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getVerbose_doc
"Tell whether the verbose mode is activated or not.

Returns
-------
isVerbose : bool
    The verbose mode is activated if it is *True*, desactivated otherwise."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getVerbose
OT_MetropolisHastings_getVerbose_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_setVerbose_doc
"Set the verbose mode.

Parameters
----------
isVerbose : bool
    The verbose mode is activated if it is *True*, desactivated otherwise."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::setVerbose
OT_MetropolisHastings_setVerbose_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getAcceptanceRate_doc
"Get acceptance rate.

Returns
-------
acceptanceRate : float
    Global acceptance rates over all the MCMC iterations performed."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getAcceptanceRate
OT_MetropolisHastings_getAcceptanceRate_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getInitialState_doc
"Get the initial state.

Returns
-------
initialState : sequence of float
    Initial state of the chain"
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getInitialState
OT_MetropolisHastings_getInitialState_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getCalibrationPeriod_doc
"Get the calibration step.

Returns
-------
period : positive int
    This number defines the number of samples before calibration occurs during
    the burnin phase."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getCalibrationPeriod
OT_MetropolisHastings_getCalibrationPeriod_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_setCalibrationPeriod_doc
"Set the calibration period.

Parameters
----------
period : positive int
    This number defines the number of samples before calibration occurs during
    the burnin phase."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::setCalibrationPeriod
OT_MetropolisHastings_setCalibrationPeriod_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getExpansionFactor_doc
"Get the expansion factor.

Returns
-------
expansionFactor : float
    Expansion factor :math:`e` of the calibration factor."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getExpansionFactor
OT_MetropolisHastings_getExpansionFactor_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_setExpansionFactor_doc
"Set the expansion factor.

Parameters
----------
expansionFactor : float, :math:`e > 1`
    Expansion factor :math:`e` of the calibration factor."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::setExpansionFactor
OT_MetropolisHastings_setExpansionFactor_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getCalibrationRange_doc
"Get the range.

Returns
-------
range : :class:`~openturns.Interval` of dimension 1
    Range :math:`[m,M]` of the calibration factor."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getCalibrationRange
OT_MetropolisHastings_getCalibrationRange_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_setCalibrationRange_doc
"Set the range.

Parameters
----------
range : :class:`~openturns.Interval` of dimension 1
    Range :math:`[m,M]` of the calibration factor."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::setCalibrationRange
OT_MetropolisHastings_setCalibrationRange_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getShrinkFactor_doc
"Get the shrink factor.

Returns
-------
shrinkFactor : float
    Shrink factor :math:`s` of the calibration factor."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getShrinkFactor
OT_MetropolisHastings_getShrinkFactor_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_setShrinkFactor_doc
"Set the shrink factor.

Parameters
----------
shrinkFactor : float, :math:`0 < s < 1`
    Shrink factor :math:`s` of the calibration factor."
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::setShrinkFactor
OT_MetropolisHastings_setShrinkFactor_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getTargetLogPDF_doc
"Get the target log-pdf.

Returns
-------
targetLogPDF : :class:`~openturns.Function`
    Target log-pdf as a function"
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getTargetLogPDF
OT_MetropolisHastings_getTargetLogPDF_doc

// ---------------------------------------------------------------------

%define OT_MetropolisHastings_getTargetLogPDFSupport_doc
"Get the target log-pdf.

Returns
-------
support : :class:`~openturns.Interval`
    Support of the target when defined with *targetLogPDF*"
%enddef
%feature("docstring") OT::MetropolisHastingsImplementation::getTargetLogPDFSupport
OT_MetropolisHastings_getTargetLogPDFSupport_doc
